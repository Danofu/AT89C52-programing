C51 COMPILER V9.60.0.0   LCD                                                               05/11/2021 13:02:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.OBJ
COMPILER INVOKED BY: D:\Programs\Keil_v5\C51\BIN\C51.EXE LCD.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG TABS(2)

line level    source

   1          #define Test 0  // 1 - do testowania
   2                          // 0 - normalna praca
   3                          
   4          // Definicje zasobow sprzetowych
   5          sfr  P2   = 0xA0;
   6          sbit P2_6 = P2^6;
   7          sbit P2_5 = P2^5;
   8          sbit P2_4 = P2^4;
   9          sbit P2_3 = P2^3;
  10          sbit P2_2 = P2^2;
  11          sbit P2_1 = P2^1;
  12          sbit P2_0 = P2^0;
  13          
  14          // Definicje ogolne
  15          #define False 0
  16          #define True  1
  17          
  18          // Definicje podlaczenia wyswietlacza LCD
  19          #define LCD_RS  P2_4    /* p1.4 LCD Register Select line           */
  20          #define LCD_RW  P2_5    /* p1.5 LCD Read / Write line              */
  21          #define LCD_E   P2_6    /* p1.6 LCD Enable line                    */
  22          #define LCD_DB4 P2_0    /* high nibble of port 1 is used for data  */
  23          #define LCD_DB5 P2_1    /* high nibble of port 1 is used for data  */
  24          #define LCD_DB6 P2_2    /* high nibble of port 1 is used for data  */
  25          #define LCD_DB7 P2_3    /* high nibble of port 1 is used for data  */
  26          
  27          // Definicje komend wyswietlacza LCD
  28          #define LCD_CONFIG         0x28
  29          #define LCD_CLEAR          0x01
  30          #define LCD_HOME           0x02
  31          #define LCD_ENTRY_MODE     0x06
  32          #define LCD_DISPLAY_OFF    0x08
  33          #define LCD_CURSOR_ON      0x0A
  34          #define LCD_DISPLAY_ON     0x0C
  35          #define LCD_CURSOR_BLINK   0x0D
  36          #define LCD_CURSOR_LINE    0x0E
  37          #define LCD_CURSOR_COM     0x0F
  38          #define LCD_CURSOR_LEFT    0x10
  39          #define LCD_CURSOR_RIGHT   0x14
  40          #define LCD_SHIFT_LEFT     0x18
  41          #define LCD_SHIFT_RIGHT    0x1C
  42          #define LCD_SET_CGRAM_ADDR 0x40
  43          #define LCD_SET_DDRAM_ADDR 0x80
  44          
  45          // Importowane procedury i funkcje
  46          extern w1ms();
  47          extern w5mS();
  48          extern w50mS();
  49          
  50          //Wyslanie komendy do wyswietlacza LCD. Magistrala danych 4-o bitowa
  51          void Lcd_WriteControl (unsigned char LcdCommand)
  52          {
  53   1        unsigned char Lcd_Comm = 0;
  54   1        static bit LCDReady;
  55   1      
C51 COMPILER V9.60.0.0   LCD                                                               05/11/2021 13:02:03 PAGE 2   

  56   1        LCD_RS = False;
  57   1        LCD_RW = False;
  58   1      
  59   1        Lcd_Comm = LcdCommand >> 4;
  60   1        P2 &= 0xF0;
  61   1        P2 |= Lcd_Comm;
  62   1      
  63   1        LCD_E = True;
  64   1        LCD_E = False;
  65   1      
  66   1        Lcd_Comm = LcdCommand & 0x0F;  
  67   1        P2 &=0xF0;      // P2 = P2 & 0xF0
  68   1        P2 |= Lcd_Comm;
  69   1      
  70   1        LCD_E = True;
  71   1        LCD_E = False;
  72   1      
  73   1        P2 |= 0x0F;     // P2 = P2 | 0x0F
  74   1      
  75   1        LCD_RW = True;
  76   1        LCD_RS = False;
  77   1      
  78   1        if (Test == 0)
  79   1        {
  80   2          LCDReady = 1;
  81   2          while (LCDReady == 1)
  82   2          {
  83   3            LCD_E = True;
  84   3            LCDReady = LCD_DB7;
  85   3            LCD_E = False;
  86   3            LCD_E = True;
  87   3            LCD_E = False;
  88   3          }
  89   2        }
  90   1      }
  91          
  92          // Wyslanie danych do wyswietlacza LCD. Magistrala 4-o bitowa
  93          void Lcd_WriteData (unsigned char LcdData)
  94          {
  95   1        unsigned char Lcd_Data = 0;
  96   1        static bit LCDReady;
  97   1      
  98   1        LCD_RS = True;
  99   1        LCD_RW = False;
 100   1      
 101   1        Lcd_Data = LcdData >> 4;
 102   1        P2 &= 0xF0;
 103   1        P2 |= Lcd_Data;
 104   1      
 105   1        LCD_E = True;
 106   1        LCD_E = False;
 107   1      
 108   1        Lcd_Data = LcdData & 0x0F;  
 109   1        P2 &=0xF0;   
 110   1        P2 |= Lcd_Data;
 111   1      
 112   1        LCD_E = True;
 113   1        LCD_E = False;
 114   1      
 115   1        P2 |= 0x0F;
 116   1      
 117   1        LCD_RW = True;
C51 COMPILER V9.60.0.0   LCD                                                               05/11/2021 13:02:03 PAGE 3   

 118   1        LCD_RS = False;
 119   1      
 120   1        if (Test == 0)
 121   1        {
 122   2          LCDReady = 1;
 123   2          while (LCDReady == 1)
 124   2          {
 125   3            LCD_E = True;
 126   3            LCDReady = LCD_DB7;
 127   3            LCD_E = False;
 128   3            LCD_E = True;
 129   3            LCD_E = False;
 130   3          }
 131   2        }
 132   1      }
 133          
 134          // Wyswietlenie znaku w miejscu polozenie kursora
 135          void Lcd_DisplayCharacter (unsigned char a_char)
 136          {
 137   1        Lcd_WriteData(a_char);
 138   1      }
 139          
 140          /* Ustawienie kursora na wskazany wiersz i kolumne.
 141          *     0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15
 142          *   -----------------------------------------------------------------
 143          * 0 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 144          * 1 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 145          * 2 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 146          * 3 |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
 147          */
 148          void Lcd_Cursor (char row, char column)
 149          {
 150   1        if (row == 0) Lcd_WriteControl (0x80 + column);
 151   1        if (row == 1) Lcd_WriteControl (0xc0 + column);
 152   1        if (row == 2) Lcd_WriteControl (0x90 + column);
 153   1        if (row == 3) Lcd_WriteControl (0xd0 + column);
 154   1      }
 155          
 156          // Wyswietlenie ciagu znakow w konkretym wierszu (bez zawijania wiersza)
 157          void Lcd_DisplayRow (char row, char *string)
 158          {
 159   1        char i;
 160   1        Lcd_Cursor (row, 0);
 161   1        for (i=0; i<16; i++) Lcd_DisplayCharacter (*string++);
 162   1      }
 163          
 164          // Wyswietlenie calego ekranu - 64 znaki. Znaki zawarte w tablicy
 165          /* przyklad:
 166          ** char screen[] =  "PBW-850   2003r."
 167          **                  "----------------"
 168          **                  "  K. Murawski   "
 169          **                  "J. Chudzikiewicz";
 170          **      LCD_DisplayScreen(screen);
 171          */
 172          void Lcd_DisplayScreen (char *ptr)
 173          {
 174   1        Lcd_DisplayRow(0, ptr +  0);
 175   1        Lcd_DisplayRow(1, ptr + 16);
 176   1        Lcd_DisplayRow(2, ptr + 32);
 177   1        Lcd_DisplayRow(3, ptr + 48);
 178   1      }
 179          
C51 COMPILER V9.60.0.0   LCD                                                               05/11/2021 13:02:03 PAGE 4   

 180          // Wyswietlenie ciagu znakow od danej kolumny i wiersza
 181          void Lcd_DisplayString (char row, char column, char *string)
 182          {
 183   1        Lcd_Cursor (row, column);
 184   1        while (*string) Lcd_DisplayCharacter (*string++);
 185   1      }
 186          
 187          void AddCustomCharacter(unsigned char Character[], unsigned char CGRAMAddress)
 188          {
 189   1        unsigned char i;
 190   1        Lcd_WriteControl(CGRAMAddress);
 191   1        for (i = 0; i < 8; i++) { Lcd_WriteData(Character[i]); }
 192   1      }
 193          
 194          // Inicjalizacja wyswietlacza; 4 wiersze, 4 bitowa magistrala danych
 195          void LcdInit(void)
 196          {
 197   1        w50mS();
 198   1        P2 = 0x83;
 199   1        LCD_E   = True;
 200   1        w1ms();
 201   1        LCD_E   = False;
 202   1        w5mS();
 203   1        LCD_E   = True;
 204   1        w1ms();
 205   1        LCD_E   = False;
 206   1        w1ms();
 207   1        LCD_E   = True;
 208   1        w1ms();
 209   1        LCD_E   = False;
 210   1        w1ms();
 211   1        LCD_DB4 = False;
 212   1        LCD_E   = True;
 213   1        w1ms();
 214   1        LCD_E   = False;
 215   1        w1ms();
 216   1        Lcd_WriteControl(LCD_CONFIG);
 217   1        Lcd_WriteControl(LCD_CLEAR);
 218   1        Lcd_WriteControl(LCD_DISPLAY_OFF);
 219   1        Lcd_WriteControl(LCD_DISPLAY_ON);
 220   1        Lcd_WriteControl(LCD_ENTRY_MODE);
 221   1        Lcd_WriteControl(LCD_CURSOR_COM);
 222   1        Lcd_WriteControl(LCD_CLEAR);
 223   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    464    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
